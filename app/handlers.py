import re
from aiogram.enums import ParseMode
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, FSInputFile, CallbackQuery, ReplyKeyboardRemove
import app.keyboards as kb
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from filters import IsRegistered
import app.database.requests  as rq
from config import UK_PHONE_PATTERN, EMAIL_PATTERN, ADMINS

router = Router()


class Reg(StatesGroup):
    name = State()
    number = State()
    email = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    from_user = message.from_user
    tg_id = from_user.id

    await rq.set_user(tg_id)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = await rq.get_user(tg_id)

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    if not user.name or not user.number or not user.email:
        await state.set_state(Reg.name)
        await message.answer_photo(
            FSInputFile("static/img/start.jpg"),
            caption="–í–∞—Å –≤—ñ—Ç–∞—î –∫–∞–≤‚Äô—è—Ä–Ω—è Sip & Savour.\n–©–æ–± –ø—Ä–∏–¥–±–∞—Ç–∏ —Å—Ç—ñ–∫–µ—Ä–∏, —Å–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ —ñ–º‚Äô—è:"
        )
        return

    # –ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    await message.answer_photo(
        FSInputFile("static/img/start.jpg"),
        caption="–í–∞—Å –≤—ñ—Ç–∞—î –∫–∞–≤‚Äô—è—Ä–Ω—è Sip & Savour.\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ —Å—Ç—ñ–∫–µ—Ä—ñ–≤ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω–æ –Ω–∞ –∫–Ω–æ–ø—Ü—ñ –Ω–∏–∂—á–µ.\n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –û–ë–û–í'–Ø–ó–ö–û–í–û —Å–∫–∏–Ω—å—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –æ–ø–ª–∞—Ç–æ—é —É —Ü–µ–π —á–∞—Ç",
        reply_markup=kb.payment_link_kb()

    )


@router.message(Reg.name)
async def cmd_reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Reg.number)
    await message.answer(
        "–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=kb.share_contact_kb
    )


@router.message(Reg.number, F.contact)
async def cmd_reg_three_contact(message: Message, state: FSMContext):
    if not message.contact or not message.contact.phone_number:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –Ω–æ–º–µ—Ä–æ–º.")
        return

    await state.update_data(number=message.contact.phone_number)
    await state.set_state(Reg.email)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:", reply_markup=ReplyKeyboardRemove())


@router.message(Reg.number)
async def cmd_reg_three_text(message: Message, state: FSMContext):
    phone = message.text.strip()

    if not re.match(UK_PHONE_PATTERN, phone):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —É —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX.")
        return

    await state.update_data(number=phone)
    await state.set_state(Reg.email)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É:")


@router.message(Reg.email)
async def cmd_reg_four(message: Message, state: FSMContext):
    email = message.text.strip()

    if not re.match(EMAIL_PATTERN, email):
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É.")
        return

    await state.update_data(email=email)
    data = await state.get_data()

    await rq.update_user_data(
        tg_id=message.from_user.id,
        name=data['name'],
        number=data['number'],
        email=data['email']
    )

    await message.answer("–î—è–∫—É—î–º–æ, —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",  reply_markup=kb.payment_link_kb())

    await state.clear()



@router.message(IsRegistered(), F.photo)
async def handle_screenshot(message: Message, bot: Bot):
    tg_id = message.from_user.id
    photo_file_id = message.photo[-1].file_id

    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        queue_number = await rq.add_payment_request(tg_id, photo_file_id)
        user = await rq.get_user(tg_id)

        await message.answer(
            f"–î—è–∫—É—î–º–æ! –í–∞—à –Ω–æ–º–µ—Ä —É —á–µ—Ä–∑—ñ: {queue_number}. –ú–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –æ–ø–ª–∞—Ç—É —ñ –ø–æ–≤—ñ–¥–æ–º–∏–º–æ –≤–∞—Å."
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        for admin_id in ADMINS:
            await bot.send_photo(
                chat_id=admin_id,
                photo=photo_file_id,
                caption=(
                    f"<b>–ù–æ–≤–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏</b>\n\n"
                    f"<b>–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b>\n"
                    f"üë§ –Ü–º‚Äô—è: {user.name or '‚Äî'}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.number or '‚Äî'}\n"
                    f"‚úâÔ∏è Email: {user.email or '‚Äî'}\n"
                    f"üÜî Telegram ID: <code>{tg_id}</code>\n"
                    f"üî¢ –ù–æ–º–µ—Ä —É —á–µ—Ä–∑—ñ: <b>{queue_number}</b>\n\n"
                    f"üëâ –î–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è ‚Äî —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ."

                ),
                parse_mode=ParseMode.HTML,
                reply_markup=kb.confirm_keyboard(tg_id)
            )

    except Exception as e:
        await message.answer(
            "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        print(f"[ERROR] handle_screenshot: {e}")



@router.callback_query(F.data.startswith("confirm:"))
async def handle_confirm_payment(callback: CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in ADMINS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", show_alert=True)
        return

    user_id = int(callback.data.split(":")[1])
    confirmed = await rq.confirm_latest_payment_by_tg_id(user_id)

    if confirmed:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback.bot.send_message(
            chat_id=user_id,
            text="–£—Ä–∞! –í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏–¥–±–∞–ª–∏ —Å—Ç—ñ–∫–µ—Ä–∏ üéâ\n"
                 "–ô–æ–≥–æ –º–æ–∂–Ω–∞ –∑–∞–±—Ä–∞—Ç–∏ –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n<b>–≤—É–ª. –õ–∞–∑–∞—Ä—è–Ω–∞, 10, –î–Ω—ñ–ø—Ä–æ</b>.",
            parse_mode="HTML"
        )

        # –ë–µ—Ä—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π caption –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –Ω–µ–º—É —Å—Ç–∞—Ç—É—Å
        original_caption = callback.message.caption or ""
        updated_caption = f"{original_caption}\n\n‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞</b>"

        await callback.message.edit_caption(
            caption=updated_caption,
            parse_mode=ParseMode.HTML,
            reply_markup=None
        )
        await callback.answer("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ")
    else:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ ‚ùå", show_alert=True)



@router.callback_query(F.data.startswith("reject:"))
async def handle_reject_payment(callback: CallbackQuery):
    admin_id = callback.from_user.id
    if admin_id not in ADMINS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è", show_alert=True)
        return

    user_id = int(callback.data.split(":")[1])

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    await callback.bot.send_message(
        chat_id=user_id,
        text="–í–∞—à—É –æ–ø–ª–∞—Ç—É –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏.\n–Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ ‚Äî –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
    )

    original_caption = callback.message.caption or ""
    updated_caption = f"{original_caption}\n\n‚ùå <b>–û–ø–ª–∞—Ç–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞</b>"

    try:
        await callback.message.edit_caption(
            caption=updated_caption,
            parse_mode=ParseMode.HTML,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        )
        await callback.answer("–í—ñ–¥—Ö–∏–ª–µ–Ω–æ ‚ùå")
    except Exception as e:
        print(f"[ERROR] edit_caption: {e}")
        await callback.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", show_alert=True)




@router.message(Command("pay"))
async def send_payment_button(message: Message):
    await message.answer(
        "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ —Å—Ç—ñ–∫–µ—Ä–∏ üëá \n–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –û–ë–û–í'–Ø–ó–ö–û–í–û —Å–∫–∏–Ω—å—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∑ –æ–ø–ª–∞—Ç–æ—é —É —Ü–µ–π —á–∞—Ç",
        reply_markup=kb.payment_link_kb()
    )


@router.message(IsRegistered())
async def registered_but_not_photo(message: Message):
    await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ç—ñ–ª—å–∫–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –æ–ø–ª–∞—Ç–∏ üì∑.")


@router.message()
async def not_registered_handler(message: Message):
    await message.answer("–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏, —Å–ø–æ—á–∞—Ç–∫—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—è: /start")


